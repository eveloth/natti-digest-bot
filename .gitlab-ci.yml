stages:     
  - build
  - deploy

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  COMPOSE_FILE: docker-compose-ci-staging.yml
  RENAME_FILES: >-
    mv -v .envexample .env &&
    mv -v .env.botexample .env.bot &&
    mv -v $COMPOSE_FILE docker-compose.yml
  INITIALIZE_ENV: >-
    sed -i "/PG_PASS/s/''/'$PG_PASS'/" .env &&
    sed -i "/POSTGRES_PORT/s/[0-9]\+/$POSTGRES_PORT/" .env &&
    sed -i "/POSTGRES_INSTANCE_NAME/s/[0-9]\+/$POSTGRES_INSTANCE_NAME/" .env &&
    sed -i "/BOT_PORT/s/[0-9]\+/$BOT_PORT/" .env &&
    sed -i "/SEQOPTIONS__URL/s/'.*'/'$SEQ_URL'/" .env &&
    sed -i "/SEQOPTIONS__APIKEY/s/'.*'/'$SEQ_APIKEY'/" .env &&
    sed -i "/BotToken/s/''/'$BOT_TOKEN'/" .env.bot &&
    sed -i "/HostAddress/s/''/'$BOT_HOST_ADDRESS'/" .env.bot &&
    sed -i "/SecretToken/s/''/'$BOT_SECRET_TOKEN'/" .env.bot

workflow:
  name: "Pipeline for branch: $CI_COMMIT_BRANCH"
  rules:
    - if: $CI_COMMIT_BRANCH == "devel"

build-job:       
  stage: build
  image: docker:latest
  before_script:
    - echo "Logging into registry as $CI_DEPLOY_USER"
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
  script:
    - docker buildx build --pull --no-cache --platform linux/amd64 --file ./src/NattiDigestBot/arm64.Dockerfile -t $IMAGE_TAG ./src/NattiDigestBot/
    - docker push $IMAGE_TAG

deploy-job:
  stage: deploy
  image: docker:latest
  before_script:
    - apk update && apk add rsync
    - chmod 400 $SSH_KEY
    - rsync -av -e "ssh -o StrictHostKeyChecking=no -i $SSH_KEY -p $SSH_PORT" .envexample .env.botexample $COMPOSE_FILE $SSH_USER@$PRODUCTION_HOST:$APP_DIR
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY -p $SSH_PORT $SSH_USER@$PRODUCTION_HOST "
      docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY &&
      cd $APP_DIR &&
      $RENAME_FILES &&
      docker compose down &&
      $INITIALIZE_ENV &&
      docker compose up -d --pull=always --build"


